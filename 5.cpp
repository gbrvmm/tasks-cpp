/*
Рабочее поле робота-доставщика представляет собой склад размером N×M метров. Склад разделен на квадраты размером метр на метр, 
в некоторых квадратах стоят паллеты с товаром размером  1 метр на  1 метр . Робот находится в одном из квадратов.
Необходимо как можно быстрее доехать до заданного квадрата, передвигаясь только из одного квадрата в другой строго параллельно стенам.
При этом накладываются следующие условия:
- Если робот наедет на паллету - он выйдет из строя.
- Находясь в квадрате, робот может ехать либо прямо, либо налево, либо направо (если в соответствующем направлении не стоит паллета): ездить  назад или по диагонали запрещается.
- В начальной клетке робот может быть ориентирован в любую сторону. С какой стороны робот попадет в конечную клетку также не важно.
На перемещение из одного квадрата в другой робот тратит ровно 1 секунду. Требуется вычислить минимальное время, за которое робот сможет достичь конечного квадрата
РЕшите Задачу с дополнительным условием:.
За все время пути роботу разрешается повернуть направо (то есть ехать из текущей клетки направо относительно того, откуда он попал в данный ую квадрат) не более K раз.
Входные данные
Во входном файле INPUT.TXT затем записаны числа N и M, задающие размеры рабочего пространства — натуральные числа, не превышающие 20. Далее записано N строк по M чисел в каждой. Число 0 обозначает свободный квадрат, число 1 —занятый, число 2 — клетку, откуда стартует робот и число 3 — квадрат, куда нужно добраться (квадраты, помеченные 2 и 3 являются незанятыми). Начальный и конечный квадрат в наборе данных встречаются ровно один раз.
В конце данных присутствует дополнительное число К  - количество допустимых поворотов на право
Выходные данные
В выходной файл OUTPUT.TXT выведите минимальное время, за которое можно добраться в конечный квадрат. Если попасть в конечный квадрат нельзя, выведите –1.
*/

#include <iostream>
#include <fstream>
#include <queue>
#include <cstring>

using namespace std;

const int max_n = 20; //максимальное значение для размеров склада
const int inf = 1000000000; 
const int dirs = 4; //количество направлений, в которых робот может двигаться: вверх, вправо, вниз и влево

int N, M, K;
int grid[max_n][max_n];
int dist[max_n][max_n][dirs][max_n + 1];
int startX, startY, endX, endY;

struct State {
    int x, y, dir, turns;
};

int dx[dirs] = {-1, 0, 1, 0};
int dy[dirs] = {0, 1, 0, -1};

bool isValid(int x, int y) {
    return x >= 0 && x < N && y >= 0 && y < M && grid[x][y] != 1;
}

int bfs() {
    queue<State> q;
    
    for (int i = 0; i < dirs; ++i) {
        q.push({startX, startY, i, 0});
        dist[startX][startY][i][0] = 0;
    }

    while (!q.empty()) {
        State cur = q.front();
        q.pop();
        int x = cur.x, y = cur.y, dir = cur.dir, turns = cur.turns;
        int d = dist[x][y][dir][turns];

        for (int i = 0; i < dirs; ++i) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            int new_turns = turns + (i != dir);
            
            if (!isValid(nx, ny) || new_turns > K) continue;
            
            if (dist[nx][ny][i][new_turns] > d + 1) {
                dist[nx][ny][i][new_turns] = d + 1;
                q.push({nx, ny, i, new_turns});
            }
        }
    }

    int minDist = inf;
    for (int i = 0; i < dirs; ++i) {
        for (int j = 0; j <= K; ++j) {
            minDist = min(minDist, dist[endX][endY][i][j]);
        }
    }

    if (minDist == inf) {
        return -1;
    }
    else {
        return minDist;
    }
}

int main() {
    ifstream fin("input_robot.txt");
    ofstream fout("output.txt");

    fin >> N >> M;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            fin >> grid[i][j];
            if (grid[i][j] == 2) {
                startX = i;
                startY = j;
                grid[i][j] = 0;
            }
            else if (grid[i][j] == 3) {
                endX = i;
                endY = j;
                grid[i][j] = 0;
            }
        }
    }
    fin >> K;

    for (int i = 0; i < max_n; ++i) {
        for (int j = 0; j < max_n; ++j) {
            for (int k = 0; k < dirs; ++k) {
                for (int l = 0; l <= max_n; ++l) {
                    dist[i][j][k][l] = inf;
                }
            }
        }
    }

    memset(dist, inf, sizeof(dist));
    
    int result = bfs();
    fout << result << endl;

    return 0;
}
